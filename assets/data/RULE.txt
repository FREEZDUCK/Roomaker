** animations 폴더에 있는 RULE.txt 먼저 읽고 오기 **

<몹 데이터 생성 법>
1. monsters 폴더에 만든 애니메이션 이름과 같은 이름으로 .json 파일을 만든다.
2. 아래의 규칙에 따라 생성한다.
3. 애니메이션과 몹의 데이터가 둘 다 완벽하게 만들어 졌다면 몹 추가하기 끝이다.
4. 게임에서 Tab을 누르고 /summon 명령어를 이용해 소환하여 정상적으로 추가 되었는지 확인한다.

<몹 데이터 .json 규칙>
1. 먼저 {}을 한개 열어준다.
2. .json은 파이썬의 딕셔너리 파일이라고 보면 편함.
3. 파이썬 딕셔너리와 같이 { "데이터 이름" : <데이터(int, float, 리스트, 딕셔너리, 문자열 가능)> } 형식으로 작성 됨

"hp" = 몹의 체력이다.
"speed" = 몹의 이동 속도이다. (보통 50.0)
"accel" = 몹의 가속력이다. 작을수록 최대 속도에 도달하기 까지 오래걸림 (미끄러짐)
"detect_range" = 몹이 플레이어를 감지하는 범위이다. (보통 120)
"collision_size" = 몹의 총돌 상자(콜리션)의 크기이다. [가로, 세로]

["attack" 값들]
"delay" = 공격 속도 (공격 후 다음 공격까지 걸리는 시간)
"method" = 공격 유형 타입 "melee" 는 근접 공격 (아직 원거리는 없음)
"damage" = 근접 공격 데미지
"knockback" = 공격 시 상대에게 주는 넉백 세기 (보통 : 6~8)
"collision_rect" = 공격 시 상대가 실제로 맞을 수 있는 범위 상자 (콜리션) 크기
정해줌 [몹으터부터 x위치, 몹으로부터 y위치, 가로 넓이, 세로 넓이]

["animation" 값들]
"texture_pivot" = 애니메이션 그림들을 보면 캐릭터가 이 객체의 중심이 되어야 하는데,
스킬이나 다른 효과로 인해 왼쪽에 있거나 위치가 다르다. 애니메이션 tres 파일을 만들 때 직접 pivot위치를
조정해 보면서 pivot(그림에 있는 캐릭터의 중심위치) 값을 찾은 후 이곳에 입력한다. [x, y]

"states" = 이 몹이 가진 애니메이션 종류(보통 walk, attack, death 만 가진다)
들 이름만 입력 ["이름1", "이름2"]

"attack_frames" = 몹의 attack 애니메이션 프레임(장면) 들 중에서도
공격을 준비, 공격, 공격 후 반동 그림으로 나뉘는데 딱 공격을 하는 그 순간의
프레임들(연속 공격은 이러난 프레임이 2개 이상 존재할 것임)을 입력 [4, 5, 10 ...]


이 모든 데이터가 다 있어야 정상적으로 작동된다.